import { Paginator, Repository } from '@/domain/models'
import faker from 'faker'

export const mockedRepositoriesPaginator = (): Paginator<Repository[]> => ({
  incomplete_results: faker.datatype.boolean(),
  total_count: faker.datatype.number(),
  items: [{
    name: faker.random.word(),
    description: faker.random.words(10),
    created_at: faker.random.word(),
    updated_at: faker.random.word(),
    stargazers_count: faker.datatype.number(),
    html_url: faker.internet.url(),
    owner: {
      avatar_url: faker.internet.url(),
      events_url: faker.internet.url(),
      followers_url: faker.internet.url(),
      following_url: faker.internet.url(),
      gists_url: faker.internet.url(),
      html_url: faker.internet.url(),
      organizations_url: faker.internet.url(),
      received_events_url: faker.internet.url(),
      repos_url: faker.internet.url(),
      starred_url: faker.internet.url(),
      subscriptions_url: faker.internet.url(),
      gravatar_id: faker.datatype.uuid(),
      id: +faker.datatype.uuid(),
      node_id: faker.datatype.uuid(),
      site_admin: faker.datatype.boolean(),
      url: faker.internet.url(),
      login: faker.internet.userName(),
      type: faker.random.word()
    },
    archived: faker.datatype.boolean(),
    default_branch: faker.random.word(),
    has_issues: faker.datatype.boolean(),
    disabled: faker.datatype.boolean(),
    has_pages: faker.datatype.boolean(),
    has_downloads: faker.datatype.boolean(),
    has_projects: faker.datatype.boolean(),
    has_wiki: faker.datatype.boolean(),
    forks_count: faker.datatype.number(),
    open_issues_count: faker.datatype.number(),
    watchers_count: faker.datatype.number(),
    url: faker.internet.url(),
    homepage: faker.internet.url(),
    full_name: faker.random.word(),
    license: faker.random.objectElement(),
    node_id: faker.datatype.uuid(),
    is_template: faker.datatype.boolean(),
    id: +faker.datatype.uuid(),
    fork: faker.datatype.boolean(),
    forks: faker.datatype.number(),
    language: faker.random.word(),
    open_issues: faker.datatype.number(),
    private: faker.datatype.boolean(),
    score: faker.datatype.number(),
    size: faker.datatype.number(),
    topics: [faker.random.words()],
    visibility: faker.random.word(),
    watchers: faker.datatype.number(),
    pushed_at: faker.random.word(),
    allow_forking: faker.datatype.boolean(),
    archive_url: faker.internet.url(),
    assignees_url: faker.internet.url(),
    blobs_url: faker.internet.url(),
    branches_url: faker.internet.url(),
    clone_url: faker.internet.url(),
    collaborators_url: faker.internet.url(),
    comments_url: faker.internet.url(),
    commits_url: faker.internet.url(),
    compare_url: faker.internet.url(),
    contents_url: faker.internet.url(),
    contributors_url: faker.internet.url(),
    deployments_url: faker.internet.url(),
    downloads_url: faker.internet.url(),
    events_url: faker.internet.url(),
    forks_url: faker.internet.url(),
    git_commits_url: faker.internet.url(),
    git_refs_url: faker.internet.url(),
    git_tags_url: faker.internet.url(),
    hooks_url: faker.internet.url(),
    git_url: faker.internet.url(),
    issue_comment_url: faker.internet.url(),
    issue_events_url: faker.internet.url(),
    issues_url: faker.internet.url(),
    keys_url: faker.internet.url(),
    labels_url: faker.internet.url(),
    languages_url: faker.internet.url(),
    merges_url: faker.internet.url(),
    milestones_url: faker.internet.url(),
    mirror_url: faker.internet.url(),
    notifications_url: faker.internet.url(),
    pulls_url: faker.internet.url(),
    releases_url: faker.internet.url(),
    ssh_url: faker.internet.url(),
    stargazers_url: faker.internet.url(),
    statuses_url: faker.internet.url(),
    subscribers_url: faker.internet.url(),
    subscription_url: faker.internet.url(),
    svn_url: faker.internet.url(),
    tags_url: faker.internet.url(),
    teams_url: faker.internet.url(),
    trees_url: faker.internet.url()
  }]
})
